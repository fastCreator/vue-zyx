const express = require('express')

const path = require('path')
const fs = require('fs')
const app = express()
const serialize = require('serialize-javascript')
const resolve = file => path.resolve(__dirname, file)
const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0
})



let indexHTML // generated by html-webpack-plugin
let renderer  // created from the webpack-generated server bundle
renderer = createRenderer(fs.readFileSync(resolve('../dist/assets/client.js'), 'utf-8'))
indexHTML = parseIndex(fs.readFileSync(resolve('../dist/assets/index.html'), 'utf-8'))



app.use('./', serve('../dist/assets/'))


function parseIndex (template) {
  const contentMarker = '<!-- APP -->'
  const i = template.indexOf(contentMarker)
  return {
    head: template.slice(0, i),
    tail: template.slice(i + contentMarker.length)
  }
}


function createRenderer (bundle) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}

app.get('*', (req, res) => {

  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.')
  }

  res.setHeader("Content-Type", "text/html")
  var s = Date.now()
  const context = { url: req.url }

  const renderStream = renderer.renderToStream(context);
  console.log(renderStream);

  renderStream.once('data', () => {
    res.write(indexHTML.head)
  })

  renderStream.on('data', chunk => {
    res.write(chunk)
  })

  renderStream.on('end', () => {
    // embed initial store state
    if (context.initialState) {
      res.write(
        'xxxxx'
        //`<script>window.__INITIAL_STATE__=${
        //  serialize(context.initialState, { isJSON: true })
        //  }</script>`
      )
    }
    res.end(indexHTML.tail)
    console.log(`whole request: ${Date.now() - s}ms`)
  })
})

app.listen(8000, () => {
  console.log(`server started at localhost:8000`)
})
